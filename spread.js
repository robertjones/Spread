// Generated by CoffeeScript 1.9.0
(function() {
  var load;

  load = function(numNodes) {
    var force, gameOver, generateGraph, graph, height, infect, keyData, link, msgBox, node, showButton, svg, width;
    d3.select('svg').remove();
    d3.select('p').remove();
    width = 960;
    height = 500;
    force = d3.layout.force().charge(-300).linkDistance(65).size([width, height]).gravity(0.2).linkStrength(0.2);
    svg = d3.select('body').append('svg').attr('width', width).attr('height', height);
    d3.select('body').append('p').attr('class', 'small').html("By <a href=\"http://www.twitter.com/robjones\">Rob Jones</a>.\n<a href=\"https://github.com/robertjones/spread\">View code</a>.");
    msgBox = svg.append('text').attr('x', 5).attr('y', 25).text('Click to immunise');
    showButton = function() {
      var buttonGroup1, buttonGroup2;
      buttonGroup1 = svg.append('g');
      buttonGroup1.append('rect').attr('width', 100).attr('height', 30).attr('fill', 'blue').attr('x', 5).attr('y', 5 + 40);
      buttonGroup1.append('text').text('Play again').attr('fill', 'white').attr('font-weight', 'bold').attr('x', 15).attr('y', 25 + 40);
      buttonGroup1.on('click', function() {
        return load(numNodes);
      });
      buttonGroup2 = svg.append('g');
      buttonGroup2.append('rect').attr('width', 100).attr('height', 30).attr('fill', 'blue').attr('x', 100 + 10 + 5).attr('y', 5 + 40);
      buttonGroup2.append('text').text('Next level').attr('fill', 'white').attr('font-weight', 'bold').attr('x', 100 + 10 + 15).attr('y', 25 + 40);
      return buttonGroup2.on('click', function() {
        return load(numNodes + 10);
      });
    };
    keyData = ['infected', 'healthy', 'immune'];
    svg.selectAll('.key').data(keyData).enter().append('circle').attr('class', function(d) {
      return d;
    }).attr('r', 8).attr('cx', width - 85).attr('cy', function(d, i) {
      return (i + 1) * 25;
    });
    svg.selectAll('.keyText').data(keyData).enter().append('text').text(function(d) {
      return d;
    }).attr('x', width - 85 + 15).attr('y', function(d, i) {
      return (i + 1) * 25 + 5;
    });
    svg.append('rect').attr('fill', 'transparent').attr('stroke', '#ccc').attr('stroke-width', 1).attr('x', width - 85 - 15).attr('y', 7).attr('width', 95).attr('height', keyData.length * 25 + 10);
    gameOver = function() {
      var numInfected, numSafe;
      numInfected = _.filter(graph.nodes, {
        'status': 'infected'
      }).length;
      numSafe = graph.nodes.length - numInfected;
      msgBox.text("Game over. Infected: " + numInfected + ", safe: " + numSafe);
      return showButton();
    };
    generateGraph = function(numNodes) {
      var numInfected, state, states;
      numInfected = parseInt(Math.pow(numNodes, 0.85) / 10 + 1.5);
      states = _.shuffle(_.times(numInfected, function() {
        return 'infected';
      }).concat(_.times(numNodes - numInfected, function() {
        return 'healthy';
      })));
      return {
        "nodes": (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = states.length; _i < _len; _i++) {
            state = states[_i];
            _results.push({
              "status": state
            });
          }
          return _results;
        })(),
        "links": _.flatten(_.times(parseInt(numNodes * 1.2), function() {
          var a, b;
          a = _.random(numNodes - 1);
          b = _.random(numNodes - 1);
          return [
            {
              "source": a,
              "target": b
            }, {
              "source": b,
              "target": a
            }
          ];
        }))
      };
    };
    graph = generateGraph(numNodes);
    infect = function() {
      var possInfectees;
      _(graph.links).filter({
        'source': {
          'status': 'infected'
        }
      }).filter({
        'target': {
          'status': 'healthy'
        }
      }).each(function(link) {
        if (_.random(1)) {
          return link.target.status = 'infected';
        }
      }).value();
      possInfectees = _(graph.links).filter({
        'source': {
          'status': 'infected'
        }
      }).filter({
        'target': {
          'status': 'healthy'
        }
      }).value().length;
      if (possInfectees === 0) {
        gameOver();
      }
      return force.resume();
    };
    force.nodes(graph.nodes).links(graph.links).start();
    link = svg.selectAll('.link').data(graph.links).enter().append('line').attr('class', 'link');
    node = svg.selectAll('.node').data(graph.nodes).enter().append('circle').attr('class', function(d) {
      return d.status;
    }).attr('r', 15).call(force.drag).on('click', function(d) {
      if (d.status === 'healthy') {
        d.status = 'immune';
        return infect();
      }
    });
    return force.on('tick', function() {
      link.attr('x1', function(d) {
        return d.source.x;
      }).attr('y1', function(d) {
        return d.source.y;
      }).attr('x2', function(d) {
        return d.target.x;
      }).attr('y2', function(d) {
        return d.target.y;
      });
      return node.attr('cx', function(d) {
        return d.x;
      }).attr('cy', function(d) {
        return d.y;
      }).attr('class', function(d) {
        return d.status;
      });
    });
  };

  load(20);

}).call(this);
